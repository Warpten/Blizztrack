// <auto-generated />
using System;
using Blizztrack.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blizztrack.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250602211636_UniqueProductConfigurations")]
    partial class UniqueProductConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Blizztrack.Persistence.Entities.Endpoint", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ConfigurationPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Regions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("ID");

                    b.HasIndex("Host")
                        .IsUnique();

                    b.ToTable("Endpoint", "ribbit");
                });

            modelBuilder.Entity("Blizztrack.Persistence.Entities.Product", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<int>("BGDL")
                        .HasColumnType("integer");

                    b.Property<int>("CDN")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Product", "ribbit");
                });

            modelBuilder.Entity("Blizztrack.Persistence.Entities.ProductConfig", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<byte[]>("BuildConfig")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<long>("BuildID")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("CDNConfig")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Config")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("KeyRing")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string[]>("Regions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("BuildConfig", "CDNConfig", "KeyRing", "Config", "Name", "BuildID")
                        .IsUnique();

                    b.ToTable("ProductConfiguration", "tact");
                });

            modelBuilder.Entity("EndpointProduct", b =>
                {
                    b.Property<int>("EndpointsID")
                        .HasColumnType("integer");

                    b.Property<long>("ProductsID")
                        .HasColumnType("bigint");

                    b.HasKey("EndpointsID", "ProductsID");

                    b.HasIndex("ProductsID");

                    b.ToTable("EndpointProduct", "ribbit");
                });

            modelBuilder.Entity("Blizztrack.Persistence.Entities.ProductConfig", b =>
                {
                    b.HasOne("Blizztrack.Persistence.Entities.Product", "Product")
                        .WithMany("Configurations")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EndpointProduct", b =>
                {
                    b.HasOne("Blizztrack.Persistence.Entities.Endpoint", null)
                        .WithMany()
                        .HasForeignKey("EndpointsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blizztrack.Persistence.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blizztrack.Persistence.Entities.Product", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
