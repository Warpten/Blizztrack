<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>

        <Nullable>enable</Nullable>

        <LangVersion>latest</LangVersion>

        <IncludeBuildOutput>false</IncludeBuildOutput>
        <IsRoslynComponent>true</IsRoslynComponent>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
    </PropertyGroup>

    <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <Nullable>disable</Nullable>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.13.0" PrivateAssets="all" />
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.11.0" PrivateAssets="all" />

        <PackageReference Include="Scriban" Version="6.0.0" GeneratePathProperty="true" PrivateAssets="all" />
    </ItemGroup>

    <ItemGroup>
        <!-- Private asset so that this is not seen as a dependency. -->
        <ProjectReference Include="..\Blizztrack.Generators.Shared\Blizztrack.Generators.Shared.csproj" PrivateAssets="all" />

        <!-- Pack the generator dll in the analyzers/dotnet/cs path -->
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
        <None Include="$(PkgScriban)\lib\$(TargetFramework)\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />

        <!-- Map templates as embedded resources. -->
        <EmbeddedResource Include="Templates\Resources\*.sbntxt" />
    </ItemGroup>

    <Target Name="GetDependencyTargetPaths">
        <ItemGroup>
            <TargetPathWithTargetPlatformMoniker Include="$(PKGScriban)\lib\$(TargetFramework)\Scriban.dll" IncludeRuntimeDependency="false" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
    </PropertyGroup>
</Project>
